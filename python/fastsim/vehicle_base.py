"""
Boiler plate stuff needed for vehicle.py
"""

import numpy as np
from fastsim import params


keys_and_types = {
    "scenario_name": str,
    "selection": int,
    "veh_year": int,
    "veh_pt_type": str,
    "drag_coef": np.float64,
    "frontal_area_m2": np.float64,
    "glider_kg": np.float64,
    "veh_cg_m": np.float64,
    "drive_axle_weight_frac": np.float64,
    "wheel_base_m": np.float64,
    "cargo_kg": np.float64,
    "veh_override_kg": np.float64,
    "comp_mass_multiplier": np.float64,
    "fs_max_kw": np.float64,
    "fs_secs_to_peak_pwr": np.float64,
    "fs_kwh": np.float64,
    "fs_kwh_per_kg": np.float64,
    "fc_max_kw": np.float64,
    "fc_pwr_out_perc": np.array,
    "fc_eff_map": np.array,
    "fc_eff_type": str,
    "fc_sec_to_peak_pwr": np.float64,
    "fc_base_kg": np.float64,
    "fc_kw_per_kg": np.float64,
    "min_fc_time_on": np.float64,
    "idle_fc_kw": np.float64,
    "mc_max_kw": np.float64,
    "mc_pwr_out_perc": np.array,
    "mc_eff_map": np.array,
    "mc_sec_to_peak_pwr": np.float64,
    "mc_pe_kg_per_kw": np.float64,
    "mc_pe_base_kg": np.float64,
    "ess_max_kw": np.float64,
    "ess_max_kwh": np.float64,
    "ess_kg_per_kwh": np.float64,
    "ess_base_kg": np.float64,
    "ess_round_trip_eff": np.float64,
    "ess_life_coef_a": np.float64,
    "ess_life_coef_b": np.float64,
    "min_soc": np.float64,
    "max_soc": np.float64,
    "ess_dischg_to_fc_max_eff_perc": np.float64,
    "ess_chg_to_fc_max_eff_perc": np.float64,
    "wheel_inertia_kg_m2": np.float64,
    "num_wheels": int,
    "wheel_rr_coef": np.float64,
    "wheel_radius_m": np.float64,
    "wheel_coef_of_fric": np.float64,
    "max_accel_buffer_mph": np.float64,
    "max_accel_buffer_perc_of_useable_soc": np.float64,
    "perc_high_acc_buf": np.float64,
    "mph_fc_on": np.float64,
    "kw_demand_fc_on": np.float64,
    "max_regen": np.float64,
    "stop_start": bool,
    "force_aux_on_fc": bool,
    "alt_eff": np.float64,
    "chg_eff": np.float64,
    "aux_kw": np.float64,
    "trans_kg": np.float64,
    "trans_eff": np.float64,
    "ess_to_fuel_ok_error": np.float64,
    "val_udds_mpgge": np.float64,
    "val_hwy_mpgge": np.float64,
    "val_comb_mpgge": np.float64,
    "val_udds_kwh_per_mile": np.float64,
    "val_hwy_kwh_per_mile": np.float64,
    "val_comb_kwh_per_mile": np.float64,
    "val_cd_range_mi": np.float64,
    "val_const65_mph_kwh_per_mile": np.float64,
    "val_const60_mph_kwh_per_mile": np.float64,
    "val_const55_mph_kwh_per_mile": np.float64,
    "val_const45_mph_kwh_per_mile": np.float64,
    "val_unadj_udds_kwh_per_mile": np.float64,
    "val_unadj_hwy_kwh_per_mile": np.float64,
    "val0_to60_mph": np.float64,
    "val_ess_life_miles": np.float64,
    "val_range_miles": np.float64,
    "val_veh_base_cost": np.float64,
    "val_msrp": np.float64,
    # don"t mess with this,
    "props": params.PhysicalProperties,
    # gets set during __post_init__,
    "large_baseline_eff": np.array,
    # gets set during __post_init__,
    "small_baseline_eff": np.array,
    "small_motor_power_kw": np.float64,
    "large_motor_power_kw": np.float64,
    # gets set during __post_init__,
    "fc_perc_out_array": np.array,
    # gets set during __post_init__,
    "fc_perc_out_array": np.array,
    "max_roadway_chg_kw": np.array,
    "charging_on": bool,
    "no_elec_sys": bool,
    "no_elec_aux": bool,
    "input_kw_out_array": np.array,
    "fc_kw_out_array": np.array,
    "fc_eff_array": np.array,
    "modern_max": np.float64,
    "mc_eff_array": np.array,
    "mc_kw_in_array": np.array,
    "mc_kw_out_array": np.array,
    "mc_max_elec_in_kw": np.float64,
    "mc_full_eff_array": np.array,
    "regen_a": np.float64,
    "regen_b": np.float64,
    "veh_kg": np.float64,
    "max_trac_mps2": np.float64,
    "ess_mass_kg": np.float64,
    "mc_mass_kg": np.float64,
    "fc_mass_kg": np.float64,
    "fs_mass_kg": np.float64,
    "mc_perc_out_array": np.array,
    "fc_peak_eff_override": np.float64,
    "mc_peak_eff_override": np.float64,
}

# Dict of new keys and old keys
NEW_TO_OLD = {
    "props": "props",
    "fc_perc_out_array": "fcPercOutArray",
    "mc_perc_out_array": "mcPercOutArray",
    "selection": "Selection",
    "scenario_name": "Scenario_name",
    "veh_year": "vehYear",
    "veh_pt_type": "vehPtType",
    "drag_coef": "dragCoef",
    "frontal_area_m2": "frontalAreaM2",
    "glider_kg": "gliderKg",
    "veh_cg_m": "vehCgM",
    "drive_axle_weight_frac": "driveAxleWeightFrac",
    "wheel_base_m": "wheelBaseM",
    "cargo_kg": "cargoKg",
    "veh_override_kg": "vehOverrideKg",
    "fs_max_kw": "maxFuelStorKw",
    "fs_secs_to_peak_pwr": "fuelStorSecsToPeakPwr",
    "fs_kwh": "fuelStorKwh",
    "fs_kwh_per_kg": "fuelStorKwhPerKg",
    "fc_max_kw": "maxFuelConvKw",
    "fc_eff_map": "fcEffMap",
    "fc_eff_type": "fcEffType",
    "fc_sec_to_peak_pwr": "fuelConvSecsToPeakPwr",
    "fc_base_kg": "fuelConvBaseKg",
    "fc_kw_per_kg": "fuelConvKwPerKg",
    "mc_pwr_out_perc": "mcPwrOutPerc",
    "mc_max_kw": "maxMotorKw",
    "mc_sec_to_peak_pwr": "motorSecsToPeakPwr",
    "stop_start": "stopStart",
    "mc_pe_kg_per_kw": "mcPeKgPerKw",
    "mc_pe_base_kg": "mcPeBaseKg",
    "ess_max_kw": "maxEssKw",
    "ess_max_kwh": "maxEssKwh",
    "ess_kg_per_kwh": "essKgPerKwh",
    "ess_base_kg": "essBaseKg",
    "ess_round_trip_eff": "essRoundTripEff",
    "ess_life_coef_a": "essLifeCoefA",
    "ess_life_coef_b": "essLifeCoefB",
    "wheel_inertia_kg_m2": "wheelInertiaKgM2",
    "num_wheels": "numWheels",
    "wheel_rr_coef": "wheelRrCoef",
    "wheel_radius_m": "wheelRadiusM",
    "wheel_coef_of_fric": "wheelCoefOfFric",
    "min_soc": "minSoc",
    "max_soc": "maxSoc",
    "ess_dischg_to_fc_max_eff_perc": "essDischgToFcMaxEffPerc",
    "ess_chg_to_fc_max_eff_perc": "essChgToFcMaxEffPerc",
    "max_accel_buffer_mph": "maxAccelBufferMph",
    "max_accel_buffer_perc_of_useable_soc": "maxAccelBufferPercOfUseableSoc",
    "perc_high_acc_buf": "percHighAccBuf",
    "mph_fc_on": "mphFcOn",
    "kw_demand_fc_on": "kwDemandFcOn",
    "alt_eff": "altEff",
    "chg_eff": "chgEff",
    "aux_kw": "auxKw",
    "force_aux_on_fc": "forceAuxOnFC",
    "trans_kg": "transKg",
    "trans_eff": "transEff",
    "comp_mass_multiplier": "compMassMultiplier",
    "ess_to_fuel_ok_error": "essToFuelOkError",
    "max_regen": "maxRegen",
    "val_udds_mpgge": "valUddsMpgge",
    "val_hwy_mpgge": "valHwyMpgge",
    "val_comb_mpgge": "valCombMpgge",
    "val_udds_kwh_per_mile": "valUddsKwhPerMile",
    "val_hwy_kwh_per_mile": "valHwyKwhPerMile",
    "val_comb_kwh_per_mile": "valCombKwhPerMile",
    "val_cd_range_mi": "valCdRangeMi",
    "val_const65_mph_kwh_per_mile": "valConst65MphKwhPerMile",
    "val_const60_mph_kwh_per_mile": "valConst60MphKwhPerMile",
    "val_const55_mph_kwh_per_mile": "valConst55MphKwhPerMile",
    "val_const45_mph_kwh_per_mile": "valConst45MphKwhPerMile",
    "val_unadj_udds_kwh_per_mile": "valUnadjUddsKwhPerMile",
    "val_unadj_hwy_kwh_per_mile": "valUnadjHwyKwhPerMile",
    "val0_to60_mph": "val0To60Mph",
    "val_ess_life_miles": "valEssLifeMiles",
    "val_range_miles": "valRangeMiles",
    "val_veh_base_cost": "valVehBaseCost",
    "val_msrp": "valMsrp",
    "min_fc_time_on": "minFcTimeOn",
    "idle_fc_kw": "idleFcKw",
    "mc_eff_map": "mcEffMap",
    "fc_pwr_out_perc": "fcPwrOutPerc",
    "large_baseline_eff": "largeBaselineEff",
    "small_baseline_eff": "smallBaselineEff",
    "small_motor_power_kw": "smallMotorPowerKw",
    "large_motor_power_kw": "largeMotorPowerKw",
    "max_roadway_chg_kw": "MaxRoadwayChgKw",
    "charging_on": "chargingOn",
    "no_elec_sys": "noElecSys",
    "no_elec_aux": "noElecAux",
    "input_kw_out_array": "inputKwOutArray",
    "fc_kw_out_array": "fcKwOutArray",
    "fc_eff_array": "fcEffArray",
    "modern_max": "modernMax",
    "mc_eff_array": "mcEffArray",
    "mc_kw_in_array": "mcKwInArray",
    "mc_kw_out_array": "mcKwOutArray",
    "mc_max_elec_in_kw": "mcMaxElecInKw",
    "mc_full_eff_array": "mcFullEffArray",
    "regen_a": "regenA",
    "regen_b": "regenB",
    "veh_kg": "vehKg",
    "max_trac_mps2": "maxTracMps2",
    "ess_mass_kg": "essMassKg",
    "mc_mass_kg": "mcMassKg",
    "fc_mass_kg": "fcMassKg",
    "fs_mass_kg": "fsMassKg",
    "fc_peak_eff_override": "fcPeakEffOverride",
    "mc_peak_eff_override": "mcPeakEffOverride",
}