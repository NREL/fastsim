extern crate ndarray;
use ndarray::{Array, Array1}; 
extern crate pyo3;
use pyo3::prelude::*;
// use numpy::pyo3::Python;
// use numpy::ndarray::array;
// use numpy::{ToPyArray, PyArray};

// local 
use super::params::*;
use super::utils::*;

#[pyclass] 
#[derive(Debug, Clone)]
/// Struct containing time trace data 
pub struct RustVehicle{
    scenario_name: String,
    selection: u32,
    veh_year: u32,
    veh_pt_type: String,
    drag_coef: f64,
    frontal_area_m2: f64,
    glider_kg: f64,
    veh_cg_m: f64,
    drive_axle_weight_frac: f64,
    wheel_base_m: f64,
    cargo_kg: f64,
    veh_override_kg: f64,
    comp_mass_multiplier: f64,
    max_fuel_stor_kw: f64,
    fuel_stor_secs_to_peak_pwr: f64,
    fuel_stor_kwh: f64,
    fuel_stor_kwh_per_kg: f64,
    max_fuel_conv_kw: f64,
    fc_pwr_out_perc: f64,
    fc_eff_map: Array1<f64>,
    fc_eff_type: String,
    fuel_conv_secs_to_peak_pwr: f64,
    fuel_conv_base_kg: f64,
    fuel_conv_kw_per_kg: f64,
    min_fc_time_on: f64,
    idle_fc_kw: f64,
    max_motor_kw: f64,
    mc_pwr_out_perc: f64,
    mc_eff_map: Array<f64>,
    motor_secs_to_peak_pwr: f64,
    mc_pe_kg_per_kw: f64,
    mc_pe_base_kg: f64,
    max_ess_kw: f64,
    max_ess_kwh: f64,
    ess_kg_per_kwh: f64,
    ess_base_kg: f64,
    ess_round_trip_eff: f64,
    ess_life_coef_a: f64,
    ess_life_coef_b: f64,
    min_soc: f64,
    max_soc: f64,
    ess_dischg_to_fc_max_eff_perc: f64,
    ess_chg_to_fc_max_eff_perc: f64,
    wheel_inertia_kg_m2: f64,
    num_wheels: f64,
    wheel_rr_coef: f64,
    wheel_radius_m: f64,
    wheel_coef_of_fric: f64,
    max_accel_buffer_mph: f64,
    max_accel_buffer_perc_of_useable_soc: f64,
    perc_high_acc_buf: f64,
    mph_fc_on: f64,
    kw_demand_fc_on: f64,
    max_regen: f64,
    stop_start: bool,
    force_aux_on_fc: f64,
    alt_eff: f64,
    chg_eff: f64,
    aux_kw: f64,
    trans_kg: f64,
    trans_eff: f64,
    ess_to_fuel_ok_error: f64,
    val_udds_mpgge: f64,
    val_hwy_mpgge: f64,
    val_comb_mpgge: f64,
    val_udds_kwh_per_mile: f64,
    val_hwy_kwh_per_mile: f64,
    val_comb_kwh_per_mile: f64,
    val_cd_range_mi: f64,
    val_const65_mph_kwh_per_mile: f64,
    val_const60_mph_kwh_per_mile: f64,
    val_const55_mph_kwh_per_mile: f64,
    val_const45_mph_kwh_per_mile: f64,
    val_unadj_udds_kwh_per_mile: f64,
    val_unadj_hwy_kwh_per_mile: f64,
    val0_to60_mph: f64,
    val_ess_life_miles: f64,
    val_range_miles: f64,
    val_veh_base_cost: f64,
    val_msrp: f64,
    props: Properties,  // todo: implement this
    large_baseline_eff: f64,
    small_baseline_eff: f64,
    small_motor_power_kw: f64,
    large_motor_power_kw: f64,
    fc_perc_out_array: Array1<f64>,
    regen_a: f64,
    regen_b: f64,
    max_roadway_chg_kw: f64,
    charging_on: bool,
    no_elec_sys: bool,
    no_elec_aux: bool,
    max_roadway_chg_kw: f64,
    input_kw_out_array: Array1<f64>,
    fc_kw_out_array: Array1<f64>,
    fc_eff_array: Array1<f64>,
    modern_max: f64,
    mc_eff_array: Array1<f64>,
    mc_kw_in_array,
    mc_kw_out_array,
    mc_max_elec_in_kw,
    mc_full_eff_array,
    veh_kg,
    max_trac_mps2,
    ess_mass_kg,
    mc_mass_kg,
    fc_mass_kg,
    fs_mass_kg,
    mc_perc_out_array
}